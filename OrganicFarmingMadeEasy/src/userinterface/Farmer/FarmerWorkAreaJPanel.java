/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Farmer;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.ExpertOrganization;
import Business.Organization.FarmerOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CustomerOrderWorkRequest;
import Business.WorkQueue.FarmerCropWorkRequest;
import Business.WorkQueue.FarmerEventsWorkRequest;
import Business.WorkQueue.FarmerSubsidyWorkRequest;
import Business.WorkQueue.FarmerTreatmentWorkRequest;
import Business.WorkQueue.OrganicCertificationWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.joda.time.Days;
import org.joda.time.LocalDate;
import org.joda.time.Months;

/**
 *
 * @author Pranali
 */


public class FarmerWorkAreaJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private FarmerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;
    
    /**
     * Creates new form FarmerWorkArea1
     */
    public FarmerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, FarmerOrganization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.business = business;
        valueLabel.setText(userAccount.getEmployee().getName());
        populateOrganicCerticateTable();
        populateSellOrganicCropsTable();
        populateRequestTreatmentTable();
        populateRequestSubsidyTable();
        populateCheckOrdersTable();
        populateCheckEventsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        btnRequestOrganicCertification = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrganicCertificationStatus = new javax.swing.JTable();
        btnSellOrganicCrops = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCropRequest = new javax.swing.JTable();
        btnRequestTreatment = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblTreatmentRequest = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblRequestSubsidy = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblCheckOrders = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblCheckEvents = new javax.swing.JTable();
        btnCheckOrders = new javax.swing.JButton();
        btnCheckEvents = new javax.swing.JButton();
        btnRequestSubsidy = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnForum = new javax.swing.JButton();
        btnYearlyTrends = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(47, 72, 147));

        jLabel5.setFont(new java.awt.Font("Malayalam MN", 0, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Organic Farming Made Easy");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Welcome");

        valueLabel.setForeground(new java.awt.Color(255, 255, 255));
        valueLabel.setText("<value>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(765, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(471, 471, 471))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        btnRequestOrganicCertification.setText("Request Organic Certification");
        btnRequestOrganicCertification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestOrganicCertificationActionPerformed(evt);
            }
        });

        tblOrganicCertificationStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Farmer's Name", "Status", "Result"
            }
        ));
        jScrollPane1.setViewportView(tblOrganicCertificationStatus);
        if (tblOrganicCertificationStatus.getColumnModel().getColumnCount() > 0) {
            tblOrganicCertificationStatus.getColumnModel().getColumn(1).setResizable(false);
            tblOrganicCertificationStatus.getColumnModel().getColumn(2).setResizable(false);
        }

        btnSellOrganicCrops.setText("Sell Organic Crops");
        btnSellOrganicCrops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellOrganicCropsActionPerformed(evt);
            }
        });

        tblCropRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Crop Name", "Price", "Quantity", "Days to expire/Shelf life"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCropRequest);

        btnRequestTreatment.setText("Request Treatment");
        btnRequestTreatment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestTreatmentActionPerformed(evt);
            }
        });

        tblTreatmentRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Disease", "Condition", "Result", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblTreatmentRequest);

        tblRequestSubsidy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Subsidy Requested", "Subsidy Granted", "Result", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblRequestSubsidy);

        tblCheckOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Customer ", "Crop", "Quantity", "Address", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblCheckOrders);

        tblCheckEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Event Name ", "Description", "Location", "Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblCheckEvents);

        btnCheckOrders.setText("Check Orders");
        btnCheckOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOrdersActionPerformed(evt);
            }
        });

        btnCheckEvents.setText("Check Events");
        btnCheckEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckEventsActionPerformed(evt);
            }
        });

        btnRequestSubsidy.setText("Request Subsidy");
        btnRequestSubsidy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestSubsidyActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(47, 72, 147));

        btnForum.setText("Forum");
        btnForum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForumActionPerformed(evt);
            }
        });

        btnYearlyTrends.setText("Yearly Trends");
        btnYearlyTrends.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYearlyTrendsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(btnForum, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnYearlyTrends, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(494, 494, 494))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnForum, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnYearlyTrends, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRequestTreatment)
                            .addComponent(btnRequestOrganicCertification)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 515, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSellOrganicCrops)
                            .addComponent(btnRequestSubsidy)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCheckEvents)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(306, 306, 306))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCheckOrders))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRequestOrganicCertification)
                            .addComponent(btnSellOrganicCrops)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRequestSubsidy)
                    .addComponent(btnRequestTreatment))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckOrders)
                    .addComponent(btnCheckEvents))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(80, 80, 80)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void populateOrganicCerticateTable(){
        DefaultTableModel model = (DefaultTableModel) tblOrganicCertificationStatus.getModel();
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(request instanceof OrganicCertificationWorkRequest) {
                OrganicCertificationWorkRequest ocwr = (OrganicCertificationWorkRequest)request;

                 
                Object[] row = new Object[3];
                row[0] = ocwr.getSender().getEmployee().getName();
                row[1] = ocwr.getStatus();
                boolean result = ocwr.getIsCertified();
                if(result){
                    row[2] = "Approved";
                }else if(ocwr.getStatus().equals("Rejected")){
                    row[2] = "Rejected";
                }else
                    row[2] = "Waiting";
                model.addRow(row);
            }
        }
    }
    
    public void populateSellOrganicCropsTable(){
        DefaultTableModel model = (DefaultTableModel) tblCropRequest.getModel();
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(request instanceof FarmerCropWorkRequest) {
                FarmerCropWorkRequest fcwr = (FarmerCropWorkRequest)request;

                 
                Object[] row = new Object[4];
                row[0] = fcwr.getCrop().getCropName();
                row[1] = fcwr.getCrop().getPrice();
                row[2] = fcwr.getCrop().getQuantity();
                Date date1 = fcwr.getCrop().getExpiryDate();
                Date date2 = new Date();

                if(date1.after(date2))
                {
                    row[3] = Days.daysBetween(new LocalDate(date2),new LocalDate(date1)).getDays();;
                }
                else 
                {
                    row[3] = "Expired";
                }
                
                model.addRow(row);
            }
        }
    }
    
    public void populateRequestTreatmentTable(){
        DefaultTableModel model = (DefaultTableModel) tblTreatmentRequest.getModel();
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(request instanceof FarmerTreatmentWorkRequest) {
                FarmerTreatmentWorkRequest ftwr = (FarmerTreatmentWorkRequest)request;

                 
                Object[] row = new Object[4];
                row[0] = ftwr.getDisease().getDiseaseType();
                row[1] = ftwr.getDisease().getDiseaseCondition();
                row[2] = ftwr.getTreatmentComments();
//                if(ftwr.getIsTreated()){
//                    row[2] = ftwr.getTreatmentComments();
//                }else{
//                    row[2] = "Doctor's Feedback awaited";
//                }
                row[3] = ftwr.getStatus();
                
                model.addRow(row);
            }
        }
    }
    
    public void populateRequestSubsidyTable(){
        DefaultTableModel model = (DefaultTableModel) tblRequestSubsidy.getModel();
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(request instanceof FarmerSubsidyWorkRequest) {
                FarmerSubsidyWorkRequest fswr = (FarmerSubsidyWorkRequest)request;

                 
                Object[] row = new Object[4];
                row[0] = fswr.getRequestedSubsidyValue();
                row[1] = fswr.getGivenSubsidyValue();
                row[2] = fswr.getOfficerComment();
                row[3] = fswr.getStatus();
                model.addRow(row);
            }
        }
    }
    
    public void populateCheckOrdersTable(){
        DefaultTableModel model = (DefaultTableModel) tblCheckOrders.getModel();
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(request instanceof CustomerOrderWorkRequest) {
                CustomerOrderWorkRequest cowr = (CustomerOrderWorkRequest)request;

                 
                Object[] row = new Object[5];
                row[0] = cowr.getCustomer().getEmployee().getName();
                row[1] = cowr.getCropName();
                row[2] = cowr.getQuantiy();
                row[3] = cowr.getAddress();
                row[4] = cowr.getStatus();
                model.addRow(row);
            }
        }
    }
    
    public void populateCheckEventsTable(){
        DefaultTableModel model = (DefaultTableModel) tblCheckEvents.getModel();
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(request instanceof FarmerEventsWorkRequest) {
                FarmerEventsWorkRequest fewr = (FarmerEventsWorkRequest)request;

                 
                Object[] row = new Object[5];
                row[0] = fewr.getEventName();
                row[1] = fewr.getEventDesc();
                row[2] = fewr.getLocation();
                row[3] = fewr.getEventDate();
                row[4] = fewr.getStatus();
                model.addRow(row);
            }
        }
    }
    
    private void btnForumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForumActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("FarmerForumJPanel", new FarmerForumJPanel(userProcessContainer, userAccount, enterprise,organization));
        layout.next(userProcessContainer);

    }//GEN-LAST:event_btnForumActionPerformed

    private void btnRequestOrganicCertificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestOrganicCertificationActionPerformed
        // TODO add your handling code here:
        Organization org = null;
            for(Network network : business.getNetworkList()){
                for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                    for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                        if(organization instanceof ExpertOrganization){
                            org = organization;
                            break;
                        }
                    }
                }
            }
            boolean flag = false;
            OrganicCertificationWorkRequest wr = null;
            for(WorkRequest workRequest : org.getWorkQueue().getWorkRequestList()){
                OrganicCertificationWorkRequest eo= (OrganicCertificationWorkRequest) workRequest;
                if(workRequest instanceof OrganicCertificationWorkRequest && workRequest.getSender().getUsername().equals(userAccount.getUsername())){
                    wr = (OrganicCertificationWorkRequest) workRequest;
                    if(wr.getIsCertified()){
                        flag = true;
                        break;
                    }
                    
                }
            }
            
            
           if(flag){
               JOptionPane.showMessageDialog(null,"Already issued Organic Certificate!" );
               return;
           }
             
           {
               CardLayout layout = (CardLayout) userProcessContainer.getLayout();
               userProcessContainer.add("FarmerRequestOrganicCertificationJPanel", new FarmerRequestOrganicCertificationJPanel(userProcessContainer, userAccount, enterprise,organization,business));
               layout.next(userProcessContainer);
            }
    }//GEN-LAST:event_btnRequestOrganicCertificationActionPerformed

    private void btnSellOrganicCropsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellOrganicCropsActionPerformed
        // TODO add your handling code here:
        Organization org = null;
        for(Network network : business.getNetworkList()){
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(organization instanceof ExpertOrganization){
                        org = organization;
                        break;
                    }
                }
            }
        }
        OrganicCertificationWorkRequest wr = null;
        boolean flag = false;
        List<WorkRequest> temp = new ArrayList<>();
        for(WorkRequest workRequest : org.getWorkQueue().getWorkRequestList()){
            OrganicCertificationWorkRequest eo= (OrganicCertificationWorkRequest) workRequest;
            if(workRequest instanceof OrganicCertificationWorkRequest && workRequest.getSender().getUsername()==userAccount.getUsername()){
                wr = (OrganicCertificationWorkRequest) workRequest;
                temp.add(wr);
                if(wr.getIsCertified()){
                    flag = true;
                    break;
                }
            }
        }
        //            System.out.println("Certi"+wr.getIsCertified());

        if(flag){
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("FarmerSellPortalJPanel", new FarmerSellPortalJPanel(userProcessContainer, userAccount, organization, enterprise, business));
            layout.next(userProcessContainer);
        }else{
            JOptionPane.showMessageDialog(null, "Not Certified to Sell Crops");
            return;
        }
    }//GEN-LAST:event_btnSellOrganicCropsActionPerformed

    private void btnRequestTreatmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestTreatmentActionPerformed
        // TODO add your handling code here:
        
        Organization org = null;
        for(Network network : business.getNetworkList()){
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(organization instanceof DoctorOrganization){
                        org = organization;
                        break;
                    }
                }
            }
        }
//        boolean flag = false;
//        FarmerTreatmentWorkRequest wr = null;
//        for(WorkRequest workRequest : org.getWorkQueue().getWorkRequestList()){
//            FarmerTreatmentWorkRequest farmerTreatment= (FarmerTreatmentWorkRequest) workRequest;
//            if(workRequest instanceof FarmerTreatmentWorkRequest && workRequest.getSender().getUsername().equals(userAccount.getUsername())){
//                wr = (FarmerTreatmentWorkRequest) workRequest;
//                if(wr.getIsTreated()){
//                    flag = true;
//                    break;
//                }
//
//            }
//        }

//        if(flag){
//            JOptionPane.showMessageDialog(null,"Already Treated !!!" );
//            
//            return;
//        }
//        else
        //{
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("FarmerRequestTreatmentJPanel", new FarmerRequestTreatmentJPanel(userProcessContainer, userAccount, enterprise,organization,business));
            layout.next(userProcessContainer);
        //}
    }//GEN-LAST:event_btnRequestTreatmentActionPerformed

    private void btnCheckOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOrdersActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("FarmerOrderRequestJPanel", new FarmerOrderRequestJPanel(userProcessContainer, userAccount, organization,enterprise,business));
        layout.next(userProcessContainer);

    }//GEN-LAST:event_btnCheckOrdersActionPerformed

    private void btnCheckEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckEventsActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("FarmerEventsJPanel", new FarmerEventsJPanel(userProcessContainer, userAccount, organization,enterprise,business));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnCheckEventsActionPerformed

    private void btnRequestSubsidyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestSubsidyActionPerformed
        // TODO add your handling code here:
        /*boolean flag = false;
        //FarmerCropWorkRequest fc = null;
        double loss = 0.0;

        for(WorkRequest workRequest :userAccount.getWorkQueue().getWorkRequestList()){
            if(workRequest instanceof FarmerCropWorkRequest){
                FarmerCropWorkRequest fs= (FarmerCropWorkRequest) workRequest;
                Date date1 = fs.getRequestDate();
                Date date2 = new Date();
                if(fs.getCrop().getExpiryDate().before(date2) ){//&& (Months.monthsBetween(new LocalDate(date1), new LocalDate(date2))).getMonths() >= 6){
                    loss +=fs.getCrop().getQuantity() * fs.getCrop().getPrice();
                }else{
                    JOptionPane.showMessageDialog(null, "Subsidy cannot be given as no expired crops"+loss);
                }
            }
        }

        FarmerSubsidyWorkRequest subsidyWorkRequest = null;

        for(WorkRequest workRequest :userAccount.getWorkQueue().getWorkRequestList()){

            if(workRequest instanceof FarmerSubsidyWorkRequest){
                Date date1 = workRequest.getResolveDate();
                Date date2 = new Date();
                if((Months.monthsBetween(new LocalDate(date2), new LocalDate(date1))).getMonths() >= 6 ){
                    FarmerSubsidyWorkRequest fs= (FarmerSubsidyWorkRequest) workRequest;
                    subsidyWorkRequest = (FarmerSubsidyWorkRequest) workRequest;
                    if(subsidyWorkRequest.isIsSubsidyApproved()){
                        flag = true;
                        break;
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Subsidy already given before less than 6 months");
                    flag = true;
                    break;
                }

            }
        }
        if(flag){
            JOptionPane.showMessageDialog(null,"Already issued Subsidy!" );
        }
        else
        {
            FarmerSubsidyWorkRequest farmerSubsidyWorkRequest = new FarmerSubsidyWorkRequest();
            farmerSubsidyWorkRequest.setRequestDate(new Date());
            farmerSubsidyWorkRequest.setSender(userAccount);
            farmerSubsidyWorkRequest.setStatus("Sent");
            farmerSubsidyWorkRequest.setRequestedSubsidyValue(loss);

            Organization org = null;
            for (Network network : business.getNetworkList()) {
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (enterprise instanceof GovernmentEnterprise) {
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof OfficerOrganization) {
                                org = organization;
                                break;
                            }
                        }
                    }

                }
            }

            if (org != null) {
                //if(userAccount.getWorkQueue().getWorkRequestList().size() == 0){
                    org.getWorkQueue().getWorkRequestList().add(farmerSubsidyWorkRequest);
                    userAccount.getWorkQueue().getWorkRequestList().add(farmerSubsidyWorkRequest);
                    JOptionPane.showMessageDialog(null, "You have created request successfully");

                    //                }else{
                    //
                    //                    org.getWorkQueue().getWorkRequestList().add(farmerSubsidyWorkRequest);
                    //                    userAccount.getWorkQueue().getWorkRequestList().add(farmerSubsidyWorkRequest);
                    //                    JOptionPane.showMessageDialog(null, "You have created request successfully");
                    //
                    //                }
            }*/
                double loss = 0.0;
        
                for(WorkRequest workRequest :userAccount.getWorkQueue().getWorkRequestList()){         
                if(workRequest instanceof FarmerCropWorkRequest){
                FarmerCropWorkRequest fs= (FarmerCropWorkRequest) workRequest;
                Date date1 = fs.getRequestDate();
                Date date2 = new Date();
                if(fs.getCrop().getExpiryDate().before(date2) && (Months.monthsBetween(new LocalDate(date1), new LocalDate(date2))).getMonths() < 6){
                    loss +=fs.getCrop().getQuantity() * fs.getCrop().getPrice();
                }else{
                    JOptionPane.showMessageDialog(null, "Subsidy cannot be given as no expired crops in 6months, loss: "+loss);
                    return;
                }
            }
        }
               CardLayout layout = (CardLayout) userProcessContainer.getLayout();
               userProcessContainer.add("FarmerViewSubsidyRequestJPanel", new FarmerViewSubsidyRequestJPanel(userProcessContainer, userAccount, organization, enterprise, business,loss));
               layout.next(userProcessContainer);
    }//GEN-LAST:event_btnRequestSubsidyActionPerformed

    private void btnYearlyTrendsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYearlyTrendsActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("TopThreeOrganicCropsStatisticsJPanel", new TopThreeOrganicCropsStatisticsJPanel(userProcessContainer, userAccount, organization,enterprise,business));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnYearlyTrendsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckEvents;
    private javax.swing.JButton btnCheckOrders;
    private javax.swing.JButton btnForum;
    private javax.swing.JButton btnRequestOrganicCertification;
    private javax.swing.JButton btnRequestSubsidy;
    private javax.swing.JButton btnRequestTreatment;
    private javax.swing.JButton btnSellOrganicCrops;
    private javax.swing.JButton btnYearlyTrends;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable tblCheckEvents;
    private javax.swing.JTable tblCheckOrders;
    private javax.swing.JTable tblCropRequest;
    private javax.swing.JTable tblOrganicCertificationStatus;
    private javax.swing.JTable tblRequestSubsidy;
    private javax.swing.JTable tblTreatmentRequest;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
